'.source.js.jsx':
  # import
  'import react':
    prefix: 'ir'
    body: "import React, { ${1:Component, }${2:PropTypes} } from 'react'${3:;}"

  'import react-dom':
    prefix: 'ird'
    body: "import { ${1:findDOMNode} } from 'react-dom'${2:;}"

  ## component lifecycle
  'render()':
    prefix: 'ren'
    body: """
      render() {
      \treturn (
      \t\t${1:<div>${2}</div>}
      \t)${3:;}
      }
    """

  # mounting
  'constructor(props)':
    prefix: 'cns'
    body: """
      constructor(props) {
      \tsuper(props);

      \t${1:this.state = ${2};}
      }${3}
    """

  'componentWillMount()':
    prefix: 'cwm'
    body: """
      componentWillMount() {
      \t${1}
      }${2}
    """

  'componentDidMount()':
    prefix: 'cdm'
    body: """
      componentDidMount() {
      \t${1}
      }${2}
    """

  # updating
  'componentWillReceiveProps(np) {}':
    prefix: 'cwr'
    body: """
      componentWillReceiveProps(nextProps) {
      \t${1}
      }${2}
    """

  'shouldComponentUpdate(np, ns) {}':
    prefix: 'scu'
    body: """
      shouldComponentUpdate(nextProps, nextState) {
      \t${1}
      }${2}
    """

  'componentWillUpdate(np, ns) {}':
    prefix: 'cwu'
    body: """
      componentWillUpdate(nextProps, nextState) {
      \t${1}
      }${2}
    """

  'componentDidUpdate(pp, ps) {}':
    prefix: 'cdup'
    body: """
      componentDidUpdate(prevProps, prevState) {
      \t${1}
      }${2}
    """

  # unmounting
  'componentWillUnmount() {}':
    prefix: 'cwun'
    body: """
      componentWillUnmount() {
      \t${1}
      }${2}
    """

  ## other apis
  'setState()':
    prefix: 'sst'
    body: """
      this.setState(${1:(state${2:, props}) => }{
      \t${3}
      })${4:;}
    """

  'forceUpdate()':
    prefix: 'fup'
    body: 'forceUpdate(${1:callback})${2:;}'

  ## class properties
  'Class.defaultProps = {}':
    prefix: 'cdp'
    body: """
      ${1}.defaultProps = {
      \t${2}
      }${3:;}
    """

  'Class.propTypes = {}':
    prefix: 'cpt'
    body: """
      ${1}.propTypes = {
      \t${2}
      }${3:;}
    """

  'Class.contextTypes = {}':
    prefix: 'cct'
    body: """
      ${1}.contextTypes = {
      \t${2}
      }${3:;}
    """

  'static defaultProps = {}':
    prefix: 'scdp'
    body: """
      static defaultProps = {
      \t${1}
      }${2:;}
    """

  'static propTypes = {}':
    prefix: 'scpt'
    body: """
      static propTypes = {
      \t${1}
      }${2:;}
    """

  'static contextTypes = {}':
    prefix: 'scct'
    body: """
      static contextTypes = {
      \t${1}
      }${2:;}
    """

  ## instance properties
  'PropTypes.':
    prefix: 'pt'
    body: 'PropTypes.${1:string}${2:.isRequired}${3:,}'

  ': PropTypes.':
    prefix: 'rpt'
    body: '${1:children}: PropTypes.${2:node}${3:.isRequired}${4:,}'

  'this.props.':
    prefix: 'props'
    body: 'this.props${1:.}'

  'this.state.':
    prefix: 'state'
    body: 'this.state${1:.}'

  ## others
  'Destructure props':
    prefix: 'dtp'
    body: 'const {${1}} = this.props${2:;}'

  'Destructure state':
    prefix: 'dts'
    body: 'const {${1}} = this.state${2:;}'

  'Destructure context':
    prefix: 'dtc'
    body: 'const {${1}} = this.context${2:;}'

  'Bind event handler':
    prefix: 'btt'
    body: 'this.${1:onClick} = this.${1:onClick}.bind(this)${2:;}'

  ## boilerplates
  'Class Component':
    prefix: 'rcc'
    body: """
      import React, { Component, PropTypes } from 'react'${4:;}

      class ${1:Foo} extends Component {
      \trender() {
      \t\treturn (
      \t\t\t${2:<div>${3}</div>}
      \t\t)${4:;}
      \t}
      }

      export default ${1:Foo};
    """

  'Stateless Component':
    prefix: 'rsc'
    body: """
      import React, { PropTypes } from 'react';

      function ${1:Foo}(${2}) {
      \treturn (
      \t\t${3:<div>${4}</div>}
      \t)${5:;}
      }

      export default ${1:Foo};
    """
